# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _NIRScanner
else:
    import _NIRScanner

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class NIRScanner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    wavelengthnir = property(_NIRScanner.NIRScanner_wavelengthnir_get, _NIRScanner.NIRScanner_wavelengthnir_set)
    intensitynir = property(_NIRScanner.NIRScanner_intensitynir_get, _NIRScanner.NIRScanner_intensitynir_set)
    mEvm = property(_NIRScanner.NIRScanner_mEvm_get, _NIRScanner.NIRScanner_mEvm_set)
    mErrorFlag = property(_NIRScanner.NIRScanner_mErrorFlag_get, _NIRScanner.NIRScanner_mErrorFlag_set)
    mPrevPGAGain = property(_NIRScanner.NIRScanner_mPrevPGAGain_get, _NIRScanner.NIRScanner_mPrevPGAGain_set)
    mConfig = property(_NIRScanner.NIRScanner_mConfig_get, _NIRScanner.NIRScanner_mConfig_set)
    pRefDataBlob = property(_NIRScanner.NIRScanner_pRefDataBlob_get, _NIRScanner.NIRScanner_pRefDataBlob_set)
    mScanResults = property(_NIRScanner.NIRScanner_mScanResults_get, _NIRScanner.NIRScanner_mScanResults_set)
    mReferenceResults = property(_NIRScanner.NIRScanner_mReferenceResults_get, _NIRScanner.NIRScanner_mReferenceResults_set)

    def __init__(self, pConfig=None):
        _NIRScanner.NIRScanner_swiginit(self, _NIRScanner.new_NIRScanner(pConfig))
    __swig_destroy__ = _NIRScanner.delete_NIRScanner

    def readVersion(self):
        return _NIRScanner.NIRScanner_readVersion(self)

    def resetErrorStatus(self):
        return _NIRScanner.NIRScanner_resetErrorStatus(self)

    def setLampOnOff(self, newValue):
        return _NIRScanner.NIRScanner_setLampOnOff(self, newValue)

    def setConfig(self, scanConfigIndex, scan_type, num_patterns, num_repeats, wavelength_start_nm, wavelength_end_nm, width_px):
        return _NIRScanner.NIRScanner_setConfig(self, scanConfigIndex, scan_type, num_patterns, num_repeats, wavelength_start_nm, wavelength_end_nm, width_px)

    def configEVM(self, pConfig=None):
        return _NIRScanner.NIRScanner_configEVM(self, pConfig)

    def setPGAGain(self, newValue):
        return _NIRScanner.NIRScanner_setPGAGain(self, newValue)

    def scanSNR(self, isHadamard=True):
        return _NIRScanner.NIRScanner_scanSNR(self, isHadamard)

    def scan(self, saveDataFlag=False, numRepeats=1):
        return _NIRScanner.NIRScanner_scan(self, saveDataFlag, numRepeats)

    def copyData(self):
        return _NIRScanner.NIRScanner_copyData(self)

    def config_from_GUI(self, wavelength_start_nm=900, wavelength_end_nm=1700, scan_type=1, num_repeats=6, width_px=6):
        return _NIRScanner.NIRScanner_config_from_GUI(self, wavelength_start_nm, wavelength_end_nm, scan_type, num_repeats, width_px)

    def set_element_wavelengthnir(self, index, value):
        return _NIRScanner.NIRScanner_set_element_wavelengthnir(self, index, value)

    def set_element_intensitynir(self, index, value):
        return _NIRScanner.NIRScanner_set_element_intensitynir(self, index, value)

    def get_element_wavelengthnir(self, index):
        return _NIRScanner.NIRScanner_get_element_wavelengthnir(self, index)

    def get_element_intensitynir(self, index):
        return _NIRScanner.NIRScanner_get_element_intensitynir(self, index)

    def getScanData(self):
        return _NIRScanner.NIRScanner_getScanData(self)

    def setHibernate(self, newValue):
        return _NIRScanner.NIRScanner_setHibernate(self, newValue)

# Register NIRScanner in _NIRScanner:
_NIRScanner.NIRScanner_swigregister(NIRScanner)

